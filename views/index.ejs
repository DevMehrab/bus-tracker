<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Live GPS Tracker</title>
    <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
    <script
      src="https://maps.googleapis.com/maps/api/js?key=<%= apiKey %>&callback=initMap"
      async
      defer
    ></script>
    <style>
      body {
        font-family: Arial, sans-serif;
        padding: 20px;
        background: #f5f5f5;
      }

      h1 {
        color: #333;
      }

      #deviceIdDisplay {
        font-weight: bold;
        margin-bottom: 10px;
      }

      button {
        padding: 10px 15px;
        font-size: 16px;
        cursor: pointer;
      }

      #otherDevices {
        margin-top: 30px;
      }

      ul {
        list-style: none;
        padding: 0;
      }

      li {
        padding: 8px;
        background: #fff;
        margin-bottom: 5px;
        border: 1px solid #ddd;
        border-radius: 5px;
      }

      .id {
        color: #555;
        font-weight: bold;
      }

      .coords {
        color: #007bff;
      }
      #map {
        height: 400px;
        width: 100%;
        margin: 20px 0;
      }
      input[type="text"] {
        padding: 10px 15px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 6px;
        outline: none;
        width: 300px;
        box-sizing: border-box;
        transition: border-color 0.3s, box-shadow 0.3s;
      }

      input[type="text"]:focus {
        border-color: #007bff;
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
      }

      input[type="text"]::placeholder {
        color: #aaa;
      }
    </style>
  </head>

  <body>
    <h1>Live GPS Device Tracker</h1>

    <div id="deviceIdDisplay">
      Device ID: <span id="deviceId">Not generated</span>
    </div>
    <input
      type="text"
      id="device-prefix"
      placeholder="Enter your prefix (e.g. John)"
    />
    <button onclick="generateDeviceId()">Generate Unique Device ID</button>

    <div id="status"></div>

    <div id="map"></div>

    <div id="otherDevices">
      <h2>Other Devices' Locations</h2>
      <ul id="deviceList"></ul>
    </div>

    <script>
      let map = null;
      const LOCATION_POSTED = "location-posted";
      const LOCATION_UPDATED = "location-updated";

      const socket = io("http://localhost:3000"); // Adjust if needed

      let deviceId = localStorage.getItem("deviceId");
      const deviceIdSpan = document.getElementById("deviceId");
      const statusDiv = document.getElementById("status");
      const deviceList = document.getElementById("deviceList");

      const deviceMap = new Map();

      if (deviceId) {
        deviceIdSpan.textContent = deviceId;
        startLocationTracking();
      }

      function generateDeviceId() {
        const prefixInput = document
          .getElementById("device-prefix")
          .value.trim();
        deviceId = `${prefixInput}-device-${Math.random()
          .toString(36)
          .substr(2, 9)}`;
        localStorage.setItem("deviceId", deviceId);
        deviceIdSpan.textContent = deviceId;
        startLocationTracking();
      }

      function startLocationTracking() {
        if (!navigator.geolocation) {
          statusDiv.textContent =
            "Geolocation is not supported by your browser.";
          return;
        }

        sendLocation(); // Send once immediately
        setInterval(sendLocation, 3000); // Then every second
      }

      function sendLocation() {
        if (!deviceId) return;

        navigator.geolocation.getCurrentPosition(
          (position) => {
            const payload = {
              id: deviceId,
              lat: position.coords.latitude,
              lng: position.coords.longitude,
              timestamp: new Date().toISOString(),
            };

            socket.emit(LOCATION_POSTED, payload);
          },
          (error) => {
            statusDiv.textContent = "Error getting location: " + error.message;
          }
        );
      }

      socket.on(LOCATION_UPDATED, (payload) => {
        const { id, lat, lng, timestamp } = payload;
        if (map && id === deviceId) {
          const position = { lat, lng };
          console.log("me", id, position);
          if (!deviceMap.has(id)) {
            const memarker = new google.maps.Marker({
              position,
              map: map,
              icon: "http://maps.google.com/mapfiles/ms/icons/green-dot.png", // Change 'green' to 'blue', 'yellow', etc.
              title: `Your Device ID: ${id}`,
            });
            deviceMap.set(id, memarker);
          }
          return deviceMap.get(id).setPosition(position);
        }
        console.log(`Location update from ${id}: Lat: ${lat}, Lng: ${lng}`);
        if (map) {
          const position = { lat, lng };
          if (!deviceMap.has(id)) {
            const marker = new google.maps.Marker({
              position,
              map: map,
              icon: "http://maps.google.com/mapfiles/ms/icons/red-dot.png", // Change 'red' to 'blue', 'yellow', etc.
              title: `Device ID: ${id}`,
            });
            deviceMap.set(id, marker);
          }
          console.log("updating marker for: ", id, position);
          deviceMap.get(id).setPosition(position);
        }

        const listItem = document.createElement("li");
        listItem.innerHTML = `
            <span class="id">${id}</span><br />
            <span class="coords">
                Lat: ${lat.toFixed(5)}, 
                Lng: ${lng.toFixed(5)},
                Last updated: ${new Date(timestamp).toLocaleTimeString()}
            </span>
        `;

        deviceList.prepend(listItem);

        // Optional: Keep only latest 10 entries
        if (deviceList.children.length > 30) {
          deviceList.removeChild(deviceList.lastChild);
        }
      });

      function initMap() {
        const dhaka = { lat: 23.8103, lng: 90.4125 };
        map = new google.maps.Map(document.getElementById("map"), {
          zoom: 12,
          center: dhaka,
        });
      }
    </script>
  </body>
</html>
